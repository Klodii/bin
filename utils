#!/usr/bin/env bash

export RED="\033[1;31m"
export YELLOW="\033[1;33m"
export BLUE="\033[1;34m"
export NC="\033[0m" # No Color

function log_title {
    printf "${YELLOW}$1${NC}\n"
}
function log_info {
    printf "${BLUE}$1${NC}\n"
}
function log_error {
    printf "${RED}$1${NC}\n"
} >&2 # redirect to STDERR

function exit_w_error {
    log_error "$1" && exit 1
} >&2 # redirect to STDERR

function is_installed {
    # Checks if a command or program is installed and accessible in the system's PATH.
    #
    # It uses the 'hash' built-in command, which searches for the command in the PATH.
    # This function is useful because it returns a standard exit code:
    #   - Exit code 0 (Success) if the command is found and hashed.
    #   - Exit code 1 (Failure) if the command is not found.
    #
    # The '2> /dev/null' redirects any error messages (like 'command not found')
    # to silence the output, ensuring the function only relies on the exit status.

    command_name=$1
    hash $command_name 2> /dev/null # redirect error messages
}

function current_os {
    case "$(uname -s)" in
        Darwin)
            echo 'macos'
            return
            ;;
        Linux)
            # Check for WSL
            if grep -qi microsoft /proc/version 2>/dev/null; then
                echo "wsl"
                return
            fi
            if [[ -f /etc/os-release ]]; then
                source /etc/os-release
                echo "$ID"
                return
            fi

            # Fallback
            echo "linux"
            return
            ;;
        *)
            echo "unknown"
            return
            ;;
    esac
}

function get_tmpdir {
    # normalize TMPDIR cross Linux, macOS
    if [ $(current_os) = 'macos' ]; then
        # $TMPDIR returns a user tmp directory
        # /tmp or /private/tmp is a tmp directory accessable by all users
        # we choose to return the user tmp directory
        echo $TMPDIR
    else
        echo '/tmp'
    fi
}

function in_ssh {
    # return true if you are in ssh
    # return false if you are in your local machine
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        true
    else
        case $(ps -o comm= -p "$PPID") in
            sshd|*/sshd) true;;
            *) false;;
        esac
    fi
}
