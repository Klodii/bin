#!/bin/bash -
source utils
SCRIPT_NAME=${0##*/}
DEFAULT_NUM=5

function help {
   cat <<-HMESSAGE
[V]olume [C]ontrol
Use this command to raise/lower/mute/unmute your volume.
If no command is passed, print the current volume

Syntax: $SCRIPT_NAME [-hv] <command>
Options:
    -h     Print this help and exit.
    -v     Make more verbose the messages
    -i     Add icons to the output
    -n     Send notification

Commands:
    up <num>    Rase the volume of <num> value, if passed, otherwise $DEFAULT_NUM
    down <num>  Lower the volume of <num> value, if passed, otherwise $DEFAULT_NUM
    mute   Mute
    toggle Mute/Unmute
HMESSAGE
}
DEBUG=':' # no-op, do nothing command
ICON=':'
NOTIFICATION=false

while getopts "hvin" option; do
    case $option in
        h )
            help
            exit 0;;
        v )
            DEBUG='echo';;
        i )
            function get_icon {
                local volume=$(sed 's/%//' <<<"$1") # here document
                case $volume in
                    'Mute') v_icon="󰝟 ";;
                    100|[6-9][0-9]) v_icon="󰕾 " ;;
                    [1-5][0-9]) v_icon="󰖀 " ;;
                    *) v_icon="󰕿 " ;;
                esac
                echo $v_icon
            }
            ICON=get_icon;;
        n )
            NOTIFICATION=true;;
        \?)
            exit_w_error "Error: Invalid option";;
    esac
done
shift $((OPTIND -1)) # remove all options from $#

COMAND=$1
NUM="${2:-$DEFAULT_NUM}"
OPERATNG_SYSTEM=$(uname -s)
if [ $OPERATNG_SYSTEM = 'Darwin' ]; then # macos
        $DEBUG "Using osascript"

        function get_volume { osascript -e 'output volume of (get volume settings)' ;}
        function up { osascript -e "set volume output volume $(get_volume)+$NUM" ;}
        function down { osascript -e "set volume output volume $(get_volume)-$NUM" ;}
        function mute { osascript -e "set volume with output muted" ;}
        function unmute { osascript -e "set volume without output muted" ;}
        function is_muted { osascript -e "output muted of (get volume settings)" ;}
        function toggle {
            if $(is_muted); then
                unmute;
            else
                mute;
            fi
        }
else
    if is_installed pulsemixer; then
        $DEBUG "Using pulseaudio"
        function get_volume { pulsemixer --get-volume | awk '{print int($1 * 100/150)"%"}' ;}
        function up { pulsemixer --change-volume +"$NUM" ;}
        function down { pulsemixer --change-volume -"$NUM" ;}
        function mute { pulsemixer --mute ;}
        function is_muted { pulsemixer --get-mute ;}
        function toggle { pulsemixer --toggle-mute ;}
    elif is_installed amixer; then
        $DEBUG "Using amixer"
        function get_volume { amixer sget Master | grep % | head -1 | sed -E 's/.*\[([0-9]*)%\].*/\1/' ;}
        function up { amixer sset Master "$NUM"%+ ; }
        function down { amixer sset Master "$NUM"%- ;}
        function mute { amixer sset Master mute ; }
        function is_muted { amixer sget Master | grep -q "\[off\]" && echo true ;}
        function toggle { amixer sset Master toggle ;}
    else
        exit_w_error "The script needs at least pulsemixer or amixer to work"
    fi
fi

case "$COMAND" in
    toggle) toggle ;;
    mute) mute ;;
    up) up ;;
    down) down ;;
esac

case $(is_muted) in
    true|1) volume="Mute";;
    *) volume=$(get_volume);;
esac

echo $($ICON $volume) $volume

if $NOTIFICATION; then
    if is_installed dunst; then
        dunstify -a "volume_control" -u low -r 9090 -h int:value:"$volume" -i "volume-$COMAND" "Volume: $volume" -t 2000
    elif is_installed terminal-notifier; then
        title='volume control'
        message="Volume: $volume"
        terminal-notifier -title "$title" -message "$message" -group 'vc'
    fi
fi
