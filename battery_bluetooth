#!/bin/bash
source utils

function usage {
  cat <<EOF
Bluetooth device battery usage:
  general:
    -h            print this message
    -t            output tmux status bar format
    -z            output zsh prompt format
    -i            enable nerd fonts battery indicators
    -d            bluetooth device MAC to check, buy default we check the Adv360 keyboard
  colors:                                                 tmux     zsh
    -g <color>    good battery level      default: 1;32 | green  | 64
    -m <color>    middle battery level    default: 1;33 | yellow | 136
    -w <color>    warn battery level      default: 0;31 | red    | 160
EOF
}

if [[ $1 == '-h' ]]; then
  usage
  exit 0
fi

function set_defaults {
    DEVICE_MAC="F5:B4:B1:6D:EA:53" # Adv360 Pro keyboard
    color_template="%s"
    TMUX_COLOR_TEMPLATE="#[fg=%s]"
    ZSH_COLOR_TEMPLATE="%%F{%s}"
    pmset_on=0
    output_tmux=0
    output_zsh=0
    good_color="1;32"
    middle_color="1;33"
    warn_color="0;31"
    charge_icon='ϟ'
    show_battery_icon=false
}


# Determine battery charge state
function battery_charge {
  case $(uname -s) in
  "Darwin")
      BATT_PCT="NaN"
      exit_w_error "Script not available for MacOs"
    ;;
  "Linux")
      BATT_PCT=$(bluetoothctl info $DEVICE_MAC | grep -E "Battery Percentage" | sed -E "s/.*\((.+)\)/\1/")
    ;;
  esac
}

# Apply the correct color to the battery status prompt
function apply_colors {
  # Green
  if [[ $BATT_PCT -ge 75 ]]; then
    COLOR=$(printf "$color_template" "$good_color")

  # Yellow
  elif [[ $BATT_PCT -ge 25 ]] && [[ $BATT_PCT -lt 75 ]]; then
    COLOR=$(printf "$color_template" "$middle_color")

  # Red
  elif [[ $BATT_PCT -lt 25 ]]; then
    COLOR=$(printf "$color_template" "$warn_color")
  fi
}

# Apply the correct icon to the battery status prompt
function apply_battery_icon {
  case $BATT_PCT in
      100) GRAPH="█" ;;
      9[0-9]) GRAPH="▇" ;;
      8[0-9]|7[0-9]) GRAPH="▆" ;;
      6[0-9]|5[0-9]) GRAPH="▅" ;;
      4[0-9]|3[0-9]) GRAPH="▃" ;;
      2[0-9]) GRAPH="▂" ;;
      1[0-9]|[0-9]) GRAPH="▁" ;;
  esac
  GRAPH="$GRAPH󰂯"
}

# Print the battery status
function print_status {
  [ "$show_battery_icon" = true ] && apply_battery_icon

  if ((output_tmux)); then
    printf "%s%s %s%s" "$COLOR" "$BATT_PCT%" "$GRAPH" "#[default]"
  elif ((output_zsh)); then
    printf "%%B%s%s %s" "$COLOR" "$BATT_PCT%" "$GRAPH"
  else
    printf "\e[0;%sm%s %s \e[m\n" "$COLOR" "$BATT_PCT%" "$GRAPH"
  fi
}

set_defaults
# Read args
while getopts "g:m:w:d:tiz" opt; do
  case $opt in
  g)
    good_color=$OPTARG
    ;;
  m)
    middle_color=$OPTARG
    ;;
  w)
    warn_color=$OPTARG
    ;;
  i)
    show_battery_icon=true
    ;;
  t)
    color_template="$TMUX_COLOR_TEMPLATE"
    output_tmux=1
    good_color="balck"
    middle_color="yellow"
    warn_color="red"
    ;;
  z)
    color_template="$ZSH_COLOR_TEMPLATE"
    output_zsh=1
    good_color="64"
    middle_color="136"
    warn_color="160"
    ;;
  d)
    DEVICE_MAC="$OPTARG"
    ;;
  \?)
    echo "Invalid option: -$OPTARG"
    exit 1
    ;;
  esac
done

battery_charge
apply_colors
print_status
