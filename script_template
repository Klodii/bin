#!/bin/bash -
SCRIPT_NAME=${0##*/}  # performed a string manipulation operation to get the script name

function help {
    # here-document used instead of echoing all lines
   cat <<-HMESSAGE
Explaing what the program does

Syntax: $SCRIPT_NAME [-h] <arg1> <arg2>
Options:
    -h     Print this help and exit.
    -n

Long option:
    --help     Print this help and exit.
    --name     Example of long option that accepts a value
HMESSAGE
}

function exit_w_error {
    echo "$1"
    exit 1
} >&2 # redirect to STDERR

# Get the options
# -: is used to enable long arguments
while getopts "h-:" option; do
    case $option in
        h )
            help
            exit 0;;
        n )
            NAME=$OPTARG;;
        - ) # Long arguments section
            case $OPTARG in
                help)
                    help
                    exit 0;;
                name=*) # case where the user usese the = to separate the value
                    # through parameter expanspansion string manipulation
                    # we remove all the character previous, and including, the =
                    NAME="${OPTARG#*=}";;
                name ) # cases where the user uses the space to separate the value
                    # in this case we get the value passed by using OPTIND that
                    # holds the index of the next parameter, with ! we retrive the
                    # value of parameter list in that index
                    NAME="${!OPTIND}"
                    # whe have to jump the parameter taken, it is not a option
                    let OPTIND++
                    ;;

            esac
            ;;
        \?)
            echo "Error: Invalid option"
            exit 1;;
    esac
done
shift $((OPTIND -1)) # remove all options from $#

arg1="$1"
arg2="$2"
[ -z "$arg1" ] && exit_w_error "Arg1 missing"
[ -z "$arg2" ] && exit_w_error "Arg2 missing"

# this is a multi line comment. The ':' command is a no-op, does nothing and
# returns true.
# Is used in conjunction with the here-document to do a multiline comment
: << DOC
To check if a commmand exists or note there are two methods:
- exists a executable file with the command name in PATH
- call the command with the -V flag, to get the version. If returns something
that means that the comand exists, otherwise not.

The first solution is the prefered one, becasue the second method can fail if
the comand does not have the -V flag, but is more quicker to write.
DOC

# first method
function is_installed {
    [ -z "$1" ] && echo "Command name missing" && exit 1
    COMMAND=$1
    FOUND=false
    PATH_SPACED=${PATH//:/ } # separate each path by space instead of :
    for individual_path in ${PATH_SPACED}; do
        # true if file exist and is executable
        [ -x "$individual_path/$COMMAND" ] && FOUND=true && break
    done
}

# second method
# redirect STDOUT and STDERR to /dev/null, in order to avoid echoing something
rg -V >&/dev/null || exit_w_error "rg command is not installed"
