#!/bin/bash -

source utils

SCRIPT_NAME=${0##*/}
WORK_TIME=25
BREAK_TIME=5
function help {
   cat <<-HMESSAGE
Pomodoro timer, to help you focus!

Requires https://github.com/caarlos0/timer to be installed

Syntax: $SCRIPT_NAME [-h][-w value][-b value]
Options:
    -h     Print this help and exit.
    -w     Time to work (default $WORK_TIME)
    -b     Time to break (default $BREAK_TIME)

HMESSAGE
}

while getopts "hw:b:" option; do
    case $option in
        h )
            help
            exit 0;;
        w )
            WORK_TIME=$OPTARG;;
        b )
            BREAK_TIME=$OPTARG;;
        \?)
            echo "Error: Invalid option"
            exit 1;;
    esac
done
shift $((OPTIND -1))

OPERATNG_SYSTEM=$(uname -s)
if [ $OPERATNG_SYSTEM = 'Darwin' ]; then # MacOs
    SAY_CMD="say"
    function work_end_notification {
        terminal-notifier -title 'Pomodoro'\
            -message 'Work Timer is up! Take a Break ðŸ˜Š'\
            -appIcon "$XDG_DATA_HOME/$SCRIPT_NAME/notification-img.png"\
            -group 'pomodoro'\
            -sound Crystal
        }

    function break_end_notification {
        terminal-notifier -title 'Pomodoro'\
            -message 'Break is over! Get back to work ðŸ˜¬'\
            -appIcon "$XDG_DATA_HOME/$SCRIPT_NAME/notification-img.png"\
            -group 'pomodoro'\
            -sound Crystal
        }
else
    SAY_CMD="spd-say"
    function work_end_notification {
        exit_w_error "work_end_notification function for Linux missing"
    }
    function break_end_notification {
        exit_w_error "break_end_notification function for Linux missing"
    }
fi

$SAY_CMD "work session start"
log_info "work session starts..."
timer ${WORK_TIME}m
$SAY_CMD "'work' session done"
work_end_notification

$SAY_CMD "break session start"
log_info "break session start..."
timer ${BREAK_TIME}m
$SAY_CMD "'break' session done"
break_end_notification
