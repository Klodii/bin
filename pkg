#!/bin/bash
source utils

SCRIPT_NAME=${0##*/}  # performed a string manipulation operation to get the script name

function help {
cat <<-HMESSAGE
A wrapper script that abstracts package operations across different operating systems.

Syntax: $SCRIPT_NAME [-h] <checkupdates|upgrade> [<args>]

Options:
  -h               Show this help message and exit.

Subcommands:
  checkupdates     List all packages that have available updates.
  upgrade          Upgrade all installed packages to their latest version.

Description:
  This script simplifies package management by providing a unified interface
  for various operating systems, hiding the underlying command differences.
HMESSAGE
}

SUBCOMMAND="$1"
[ -z "$SUBCOMMAND" ] && { help; exit 1; }
[ "$SUBCOMMAND" = "-h" ] && { help;  exit 0; }

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
BASE_COMMAND_NAME='pkg'
COMMAND_FILE="${SCRIPT_DIR}/${BASE_COMMAND_NAME}_${SUBCOMMAND}"
if [ ! -f "$COMMAND_FILE" ]; then
    exit_w_error "Error: Unknown subcommand '$SUBCOMMAND'. File '$COMMAND_FILE' not found."
fi

shift # Move past the subcommand argument so getopts can process the flags

"$COMMAND_FILE" "$@"
