#!/bin/bash
usage() {
  cat <<EOF
battery usage:
  general:
    -h, --help    print this message
    -t            output tmux status bar format
    -z            output zsh prompt format
    -c            replace the battery charging icon
    -i            enable nerd fonts battery indicators
    -G            show the graph
    -a            output ascii instead of spark
    -p            use pmset (more accurate)
  colors:                                                 tmux     zsh
    -g <color>    good battery level      default: 1;32 | green  | 64
    -m <color>    middle battery level    default: 1;33 | yellow | 136
    -w <color>    warn battery level      default: 0;31 | red    | 160
EOF
}

if [[ $1 == '-h' || $1 == '--help' || $1 == '-?' ]]; then
  usage
  exit 0
fi

# For default behavior
setDefaults() {
  pmset_on=0
  output_tmux=0
  output_zsh=0
  show_graph=0
  show_battery_icon=0
  charge_icon='ϟ'
  ascii=0
  ascii_bar='=========='
  good_color="1;32"
  middle_color="1;33"
  warn_color="0;31"
}

setDefaults

CHARGING=false

COLOR_TEMPLATE="%s"
TMUX_COLOR_TEMPLATE="#[fg=%s]"
ZSH_COLOR_TEMPLATE="%%F{%s}"

# Determine battery charge state
battery_charge() {
  case $(uname -s) in
  "Darwin")
    if ((pmset_on)) && command -v pmset &>/dev/null; then
      [ "$(pmset -g batt | grep -o 'AC Power')" ] && CHARGING=true
      BATT_PCT=$(pmset -g batt | grep -o '[0-9]*%' | tr -d %)
    else
      while read key value; do
        case $key in
        "MaxCapacity")
          maxcap=$value
          ;;
        "CurrentCapacity")
          curcap=$value
          ;;
        "ExternalConnected")
          [ $value == "Yes" ] && CHARGING=true
          ;;
        esac
        if [[ -n "$maxcap" && -n $curcap ]]; then
          BATT_PCT=$((100 * curcap / maxcap))
        fi
      done < <(ioreg -n AppleSmartBattery -r | grep -o '"[^"]*" = [^ ]*' | sed -e 's/= //g' -e 's/"//g' | sort)
    fi
    ;;
  "Linux")
    battery_path=/sys/class/power_supply/BAT0
    case $(cat /etc/*-release) in
    *"Arch Linux"* | *"Ubuntu"*)
      battery_state=$(cat $battery_path/energy_now)
      battery_full=$battery_path/energy_full
      battery_current=$battery_path/energy_now
      ;;
    *)
      battery_state=$(cat $battery_path/status)
      battery_full=$battery_path/charge_full
      battery_current=$battery_path/charge_now
      ;;
    esac

    [ $battery_state == 'Charging' ] && CHARGING=true
    now=$(cat $battery_current)
    full=$(cat $battery_full)
    BATT_PCT=$((100 * $now / $full))
    ;;
  esac
}

# Apply the correct color to the battery status prompt
apply_colors() {
  # Green
  if [[ $BATT_PCT -ge 75 ]]; then
    COLOR=$(printf "$COLOR_TEMPLATE" "$good_color")

  # Yellow
  elif [[ $BATT_PCT -ge 25 ]] && [[ $BATT_PCT -lt 75 ]]; then
    COLOR=$(printf "$COLOR_TEMPLATE" "$middle_color")

  # Red
  elif [[ $BATT_PCT -lt 25 ]]; then
    COLOR=$(printf "$COLOR_TEMPLATE" "$warn_color")
  fi
}

# Apply the correct icon to the battery status prompt
apply_battery_icon() {
  if $CHARGING; then
    GRAPH=${charge_icon}
  else
    # Full
    if [[ $BATT_PCT -ge 95 ]]; then
      GRAPH=" "

    # NEARL-FULL
    elif [[ $BATT_PCT -ge 75 ]] && [[ $BATT_PCT -lt 95 ]]; then
      GRAPH=" "

    # HALF-FULL
    elif [[ $BATT_PCT -ge 25 ]] && [[ $BATT_PCT -lt 75 ]]; then
      GRAPH=" "

    # NEARLY EMPTY
    elif [[ $BATT_PCT -lt 25 ]]; then
      GRAPH=" "
    fi
  fi
}

# Print the battery status
print_status() {
  if ((show_battery_icon)); then
    apply_battery_icon
  else
    if $CHARGING; then
      GRAPH=${charge_icon}
    else
      if ((show_graph)); then
        if command -v spark &>/dev/null; then
          sparks=$(spark 0 ${BATT_PCT} 100)
          GRAPH=${sparks:1:1}
        else
          ascii=1
        fi
      fi

      if ((ascii)); then
        barlength=${#ascii_bar}

        # Battery percentage rounded to the lenght of ascii_bar
        rounded_n=$(($barlength * $BATT_PCT / 100 + 1))

        # Creates the bar
        GRAPH=$(printf "[%-${barlength}s]" "${ascii_bar:0:rounded_n}")
      fi
    fi
  fi

  if ((output_tmux)); then
    printf "%s%s %s%s" "$COLOR" "$BATT_PCT%" "$GRAPH" "#[default]"
  elif ((output_zsh)); then
    printf "%%B%s%s %s" "$COLOR" "$BATT_PCT%" "$GRAPH"
  else
    printf "\e[0;%sm%s %s \e[m\n" "$COLOR" "$BATT_PCT%" "$GRAPH"
  fi
}

# Read args
while getopts ":g:m:w:c:tizGab:p" opt; do
  case $opt in
  g)
    good_color=$OPTARG
    ;;
  m)
    middle_color=$OPTARG
    ;;
  w)
    echo "$OPTARG"
    warn_color=$OPTARG
    ;;
  c)
    charge_icon=$OPTARG
    ;;
  i)
    show_battery_icon=1
    ;;
  t)
    COLOR_TEMPLATE="$TMUX_COLOR_TEMPLATE"
    output_tmux=1
    good_color="colour237"
    middle_color="colour243"
    warn_color="red"
    ;;
  z)
    COLOR_TEMPLATE="$ZSH_COLOR_TEMPLATE"
    output_zsh=1
    good_color="64"
    middle_color="136"
    warn_color="160"
    ;;
  G)
    show_graph=1
    ;;
  a)
    ascii=1
    ;;
  p)
    pmset_on=1
    ;;
  \?)
    echo "Invalid option: -$OPTARG"
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument"
    exit 1
    ;;
  esac
done

battery_charge
apply_colors
print_status
