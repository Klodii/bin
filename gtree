#!/bin/bash
source utils

SCRIPT_NAME=${0##*/}  # performed a string manipulation operation to get the script name

function help {
cat <<-HMESSAGE
A utility script to manage Git worktrees through subcommands.

Usage: $SCRIPT_NAME [-h] <ls|new|rm|choose> [<args>]


Options:
  -h          Show this help message and exit.

Subcommands:
  ls          List all Git worktrees.
  new         Create a new Git worktree.
  rm          Remove an existing Git worktree.
  choose      Choose a Git worktree and print its path.

Description:
  This script groups common Git worktree operations under a single interface,
  simplifying workflows that involve multiple working directories.
HMESSAGE
}

SUBCOMMAND="$1"
[ -z "$SUBCOMMAND" ] && { help; exit 1; }
[ "$SUBCOMMAND" = "-h" ] && { help;  exit 0; }

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
BASE_COMMAND_NAME='gtree'
COMMAND_FILE="${SCRIPT_DIR}/${BASE_COMMAND_NAME}_${SUBCOMMAND}"
if [ ! -f "$COMMAND_FILE" ]; then
    exit_w_error "Error: Unknown subcommand '$SUBCOMMAND'. File '$COMMAND_FILE' not found."
fi

shift # Move past the subcommand argument so getopts can process the flags

"$COMMAND_FILE" "$@"
